# ============================================================================
# Development Dockerfile for Kibitz + ws-mcp
# Optimized for live reloading and debugging
# ============================================================================

FROM ubuntu:24.04

# Metadata
LABEL maintainer="kibitz-team"
LABEL description="Kibitz LLM Chat + ws-mcp Development Environment"
LABEL version="dev"

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Update and install essential packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Basic utilities
    curl \
    wget \
    git \
    vim \
    nano \
    htop \
    tree \
    jq \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    libssl-dev \
    # Network tools for debugging
    net-tools \
    iputils-ping \
    dnsutils \
    # System libraries
    libc6-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python 3.12 (natively available in Ubuntu 24.04)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3 \
    python3-dev \
    python3-venv \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Python 3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
RUN python3 --version && pip3 --version

# Install uv (Python package manager used by ws-mcp)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:/root/.local/bin:${PATH}"

# Install essential Python packages
RUN pip3 install --no-cache-dir --break-system-packages \
    requests \
    fastapi \
    uvicorn \
    websockets \
    websocket-client \
    pydantic

# Install Node.js 20.x LTS
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Verify installations
RUN node --version && npm --version && python3 --version

# Install global npm packages for development
RUN npm install -g yarn pnpm nodemon --no-audit --no-fund

# Create app user but keep root for development flexibility
RUN groupadd -r appuser && useradd -r -g appuser -m appuser

# Create workspace directories
RUN mkdir -p /app/kibitz /Users/test/gitrepo/projects /app/logs /app/scripts /app/config && \
    chown -R appuser:appuser /app

# Set working directory
WORKDIR /app/kibitz

# Copy package files for dependency installation
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --no-audit --no-fund && \
    npm cache clean --force

# Copy Docker-specific files
COPY docker/scripts/ /app/scripts/
COPY docker/config/ /app/config/

# Make scripts executable
RUN chmod +x /app/scripts/*.sh

# Switch to non-root user for development
USER appuser

# Expose ports
EXPOSE 3000 10125 9229

# Set environment variables for development
ENV NODE_ENV=development
ENV PYTHONUNBUFFERED=1
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV CHOKIDAR_USEPOLLING=true
ENV WATCHPACK_POLLING=true

# Default command for development
CMD ["/app/scripts/start-dev.sh"] 